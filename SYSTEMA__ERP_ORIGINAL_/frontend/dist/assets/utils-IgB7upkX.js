const t={API_URL:"http://localhost:8080/api",APP_NAME:"CorelSys ERP",VERSION:"1.0.0",THEME:{LIGHT:"light",DARK:"dark"},ROLES:{ADMIN:"ADMIN",MANAGER:"MANAGER",USER:"USER"},NOTIFICATIONS:{POSITION:"top-right",DURATION:5e3},CACHE:{ENABLED:!0,DURATION:36e5}};const i=new class{constructor(){this.notifications=[],this.init()}init(){this.setupEventListeners(),this.loadNotifications()}setupEventListeners(){const t=document.querySelector(".btn-notification");t&&t.addEventListener("click",()=>this.toggleNotificationsPanel())}async loadNotifications(){try{const t=await fetch("/api/notifications");if(!t.ok)throw new Error("Erro ao carregar notificações");this.notifications=await t.json(),this.updateNotificationBadge()}catch(t){console.error("Erro ao carregar notificações:",t),this.notifications=this.getMockNotifications(),this.updateNotificationBadge()}}updateNotificationBadge(){const t=document.querySelector(".notification-badge");if(t){const i=this.notifications.filter(t=>!t.read).length;t.textContent=i,t.style.display=i>0?"block":"none"}}toggleNotificationsPanel(){const t=document.querySelector(".notifications-panel");t?t.classList.toggle("active"):this.createNotificationsPanel()}createNotificationsPanel(){const t=document.createElement("div");t.className="notifications-panel";const i=document.createElement("div");i.className="notifications-header",i.innerHTML='\n            <h3>Notificações</h3>\n            <button class="btn-mark-all-read">Marcar todas como lidas</button>\n        ';const o=document.createElement("div");o.className="notifications-list",this.notifications.forEach(t=>{const i=this.createNotificationItem(t);o.appendChild(i)}),t.appendChild(i),t.appendChild(o),document.body.appendChild(t);const a=t.querySelector(".btn-mark-all-read");a&&a.addEventListener("click",()=>this.markAllAsRead()),t.classList.add("active")}createNotificationItem(t){const i=document.createElement("div");return i.className="notification-item "+(t.read?"read":"unread"),i.innerHTML=`\n            <div class="notification-icon">\n                <i class="fas ${this.getNotificationIcon(t.type)}"></i>\n            </div>\n            <div class="notification-content">\n                <p class="notification-title">${t.title}</p>\n                <p class="notification-message">${t.message}</p>\n                <span class="notification-time">${this.formatTime(t.timestamp)}</span>\n            </div>\n            ${t.read?"":'<div class="notification-dot"></div>'}\n        `,i.addEventListener("click",()=>this.handleNotificationClick(t)),i}getNotificationIcon(t){return{info:"fa-info-circle",warning:"fa-exclamation-triangle",success:"fa-check-circle",error:"fa-times-circle",alert:"fa-bell"}[t]||"fa-bell"}formatTime(t){const i=new Date(t),o=new Date-i;if(o<6e4)return"Agora mesmo";if(o<36e5){const t=Math.floor(o/6e4);return`${t} ${1===t?"minuto":"minutos"} atrás`}if(o<864e5){const t=Math.floor(o/36e5);return`${t} ${1===t?"hora":"horas"} atrás`}return i.toLocaleDateString("pt-BR",{day:"2-digit",month:"2-digit",year:"numeric"})}async handleNotificationClick(t){if(!t.read)try{await this.markAsRead(t.id),t.read=!0,this.updateNotificationBadge(),this.updateNotificationItem(t.id)}catch(i){console.error("Erro ao marcar notificação como lida:",i)}}async markAsRead(t){try{if(!(await fetch(`/api/notifications/${t}/read`,{method:"POST"})).ok)throw new Error("Erro ao marcar notificação como lida")}catch(i){throw console.error("Erro ao marcar notificação como lida:",i),i}}async markAllAsRead(){try{if(!(await fetch("/api/notifications/read-all",{method:"POST"})).ok)throw new Error("Erro ao marcar todas as notificações como lidas");this.notifications.forEach(t=>{t.read=!0}),this.updateNotificationBadge(),this.updateNotificationsList()}catch(t){console.error("Erro ao marcar todas as notificações como lidas:",t)}}updateNotificationItem(t){const i=document.querySelector(`[data-notification-id="${t}"]`);if(i){i.classList.remove("unread"),i.classList.add("read");const t=i.querySelector(".notification-dot");t&&t.remove()}}updateNotificationsList(){const t=document.querySelector(".notifications-list");t&&(t.innerHTML="",this.notifications.forEach(i=>{const o=this.createNotificationItem(i);t.appendChild(o)}))}success(t){this.showNotification("success","Sucesso",t)}error(t){this.showNotification("error","Erro",t)}warning(t){this.showNotification("warning","Aviso",t)}info(t){this.showNotification("info","Informação",t)}showNotification(t,i,o){const a=document.createElement("div");a.className=`toast-notification ${t}`,a.innerHTML=`\n            <div class="toast-icon">\n                <i class="fas ${this.getNotificationIcon(t)}"></i>\n            </div>\n            <div class="toast-content">\n                <h4>${i}</h4>\n                <p>${o}</p>\n            </div>\n            <button class="toast-close">\n                <i class="fas fa-times"></i>\n            </button>\n        `,document.body.appendChild(a);const e=a.querySelector(".toast-close");e&&e.addEventListener("click",()=>{a.remove()}),setTimeout(()=>{a.classList.add("fade-out"),setTimeout(()=>a.remove(),300)},5e3)}getMockNotifications(){return[{id:"1",type:"warning",title:"Estoque Baixo",message:'O produto "Smartphone XYZ" está com estoque abaixo do nível recomendado.',timestamp:new Date(Date.now()-36e5).toISOString(),read:!1},{id:"2",type:"success",title:"Meta Atingida",message:"A meta de vendas do mês foi atingida com sucesso!",timestamp:new Date(Date.now()-72e5).toISOString(),read:!1},{id:"3",type:"info",title:"Atualização do Sistema",message:"Uma nova versão do sistema está disponível.",timestamp:new Date(Date.now()-864e5).toISOString(),read:!0}]}};export{t as C,i as n};
